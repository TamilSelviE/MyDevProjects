/*Given an array of integers, return indices of the two numbers such that they add up to a specific target.

You may assume that each input would have exactly one solution, and you may not use the same element twice.

Example:

Given nums = [2, 7, 11, 15], target = 9,

Because nums[0] + nums[1] = 2 + 7 = 9,
return [0, 1].
*/

public class Solution {
    public int[] TwoSum(int[] nums, int target) {
        Dictionary<int, int> map = new Dictionary<int,int>();
        
        if (nums == null)
            return null;
        for(int i=0; i < nums.Length; i++)
        {
            if(map.TryGetValue(target - nums[i], out int index))
                return new int[] {index,i};            
            else            
                map[nums[i]] = i;
        } 
        
        return null;
    }
}
